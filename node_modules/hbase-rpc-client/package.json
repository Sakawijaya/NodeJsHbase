{
  "name": "hbase-rpc-client",
  "version": "0.1.10",
  "description": "CoffeeScript HBase client implementation with protobuf support",
  "main": "index.js",
  "scripts": {
    "prepublish": "make generate-js",
    "test": "DEBUG=-mocha*, ./node_modules/.bin/mocha  --compilers coffee:coffee-script/register --require coffee-script  test --reporter spec",
    "lint": "coffeelint --f coffeelint.json *.coffee src/* test/*",
    "cov": "./node_modules/.bin/mocha  --compilers coffee:coffee-script/register --require coffee-script  -r blanket -R html-cov > coverage.html"
  },
  "config": {
    "blanket": {
      "pattern": "/src/",
      "data-cover-never": "node_modules",
      "loader": "./node-loaders/coffee-script"
    }
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/falsecz/hbase-rpc-client.git"
  },
  "author": "",
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/falsecz/hbase-rpc-client/issues"
  },
  "homepage": "https://github.com/falsecz/hbase-rpc-client",
  "dependencies": {
    "async": "^1.4.2",
    "bytebuffer": "^2.3.2",
    "debug": "^2.2.0",
    "protobufjs": "^2.2.1",
    "readable-stream": "^2.0.2",
    "zookeeper-watcher": "^1.0.1"
  },
  "devDependencies": {
    "blanket": "~1.1.7",
    "chai": "^3.2.0",
    "coffee-script": "~1.10.0",
    "coffeelint": "~1.11.1",
    "mocha": "~2.3.2",
    "require-dir": "~0.3.0"
  },
  "readme": "hbase-rpc-client\n==========\n[![Build Status](https://travis-ci.org/falsecz/hbase-rpc-client.svg?branch=master)](https://travis-ci.org/falsecz/hbase-rpc-client)\n[![Dependency Status](https://david-dm.org/falsecz/hbase-rpc-client.svg)](https://david-dm.org/falsecz/hbase-rpc-client)\n[![License](https://img.shields.io/badge/license-Apache_2-red.svg)](https://github.com/falsecz/hbase-rpc-client/blob/master/LICENSE.txt)\n\nCoffeeScript HBase Implementation with protobuf support based on https://github.com/alibaba/node-hbase-client/\n\n### Installation\n`npm install -S hbase-rpc-client`\n\n### Supported HBase versions\n* [x] 0.98.x\n* [x] 1.0.x\n* [x] 1.2.x\n\n\n### Features\n* [x] get\n* [x] put\n* [x] delete\n* [x] mget\n* [x] mput\n* [x] mdelete\n* [x] checkAndPut\n* [x] checkAndDelete\n* [x] scan:\n\t * [√] filter\n\t * [√] filterList\n\t * [√] reverse scan\n* [x] increment\n* [x] incrementColumnValue\n* [ ] getRowOrBefore\n* [ ] mutateRow\n* [ ] append\n\n\n\n### Create a hbase client through zookeeper\n```coffeescript\nhbase = require \"hbase-rpc-client\"\n\nclient = hbase\n\tzookeeperHosts: [\"localhost\"] # required\n\tzookeeperRoot: \"/hbase\"\n\tzookeeperReconnectTimeout: 20000\n\trootRegionZKPath: \"/meta-region-server\"\n\trpcTimeout: 30000\n\tcallTimeout: 5000\n\ttcpNoDelay: no\n\ttcpKeepAlive: yes\n\trealUser: \"someRealUser\"\n\teffectiveUser: \"someEffectiveUser\"\n\nclient.on \"error\", (err) ->\n\tconsole.log \"hbase client error:\", err\n```\nIn case you experience slow communication with hbase, please see issue #24 and try to set tcpNoDelay: true\n\nTimeouts explained:\n* zookeeperReconnectTimeout - Time after zookeeper watcher creates new zk client upon receiving following events: closing, session_expired or authentication_failed (other events are handled by node-zookeeper-client). Default: 20000ms (set by zookeeper-watcher)\n* rpcTimeout - Time after hbase-rpc-client emits an error if it doesn't manage to ensure zookeeper connection or doesn't manage to get region server connection. Default: 30000ms\n* callTimeout - Time after each operation call on hbase timeouts. Default: 5000ms\n\n### put\nValues can be only strings or buffers.\n##### `put table, put, callback`\n```coffeescript\nput = new hbase.Put rowKey\nput.add cf, qualifier, value\n\nclient.put table, put, (err, res) ->\n\tconsole.log arguments\n```\n\n### get\n##### `get table, get, callback`\n```coffeescript\nget = new hbase.Get rowKey\n\nclient.get table, get, (err, res) ->\n\tconsole.log arguments\n```\n\n### delete\n##### `delete table, delete, callback`\n```coffeescript\ndel = new hbase.Delete rowKey\n\nclient.delete table, del, (err, res) ->\n\tconsole.log arguments\n```\n\n### mput\nValues can be only strings or buffers.\n##### `mput table, arrayOfPutObjects, callback`\n##### `mput table, arrayOfObjects, callback`\n```coffeescript\nput1 = new hbase.Put rowKey1\nput1.add cf1, qualifier1, value1\n\nput2 = new hbase.Put rowKey2\nput2.add cf2, qualifier2, value2\n\nclient.mput table, [put1, put2], (err, res) ->\n\tconsole.log arguments\n```\n```coffeescript\nput1 =\n\trow: rowKey1\nput1[\"#{cf1}:#{qualifier1}\"] = value1\n\nput2 =\n\trow: rowKey2\nput2[\"#{cf2}:#{qualifier2}\"] = value2\n\nclient.mput table, [put1, put2], (err, res) ->\n\tconsole.log arguments\n```\n\n### mget\n##### `mget table, arrayOfGetObjects, callback`\n##### `mget table, arrayOfObjects, callback`\n```coffeescript\nget1 = new hbase.Get rowKey1\nget2 = new hbase.Get rowKey2\n\nclient.mget table, [get1, get2], (err, res) ->\n\tconsole.log arguments\n```\n```coffeescript\nclient.mget table, [rowKey1, rowKey2], (err, res) ->\n\tconsole.log arguments\n```\n\n### mdelete\n##### `mdelete table, arrayOfDeleteObjects, callback`\n##### `mdelete table, arrayOfObjects, callback`\n```coffeescript\ndelete1 = new hbase.Delete rowKey1\ndelete2 = new hbase.Delete rowKey2\n\nclient.mdelete table, [delete1, delete2], (err, res) ->\n\tconsole.log arguments\n```\n```coffeescript\nclient.mdelete table, [rowKey1, rowKey2], (err, res) ->\n\tconsole.log arguments\n```\n\n### scan\n##### `scanner = getScanner table, startRow, stopRow`\n##### `scanner.setFilter filter`\n##### `scanner.setReversed()`\n##### `scanner.next callback`\n##### `scanner.each function, callback`\n##### `scanner.toArray callback`\n##### `scanner.close()`\n```coffeescript\nscan = client.getScanner table\n\nscan.next (err, row) ->\n\tconsole.log arguments\n```\n```coffeescript\nscan = client.getScanner table, startRow, stopRow\n\nscan.next (err, row) ->\n\tconsole.log arguments\n```\n```coffeescript\nscan = client.getScanner table\nscan.setFilter columnPrefixFilter: prefix: columnPrefix\n\nscan.next (err, row) ->\n\tconsole.log arguments\n```\n```coffeescript\nscan = client.getScanner table\n\nfilter1 =\n\tsingleColumnValueFilter:\n\t\tcolumnFamily: cf1\n\t\tcolumnQualifier: qualifier1\n\t\tcompareOp: \"EQUAL\"\n\t\tcomparator:\n\t\t\tsubstringComparator:\n\t\t\t\tsubstr: value1\n\t\tfilterIfMissing: yes\n\t\tlatestVersionOnly: yes\n\nfilter2 =\n\tsingleColumnValueFilter:\n\t\tcolumnFamily: cf2\n\t\tcolumnQualifier: qualifier2\n\t\tcompareOp: \"EQUAL\"\n\t\tcomparator:\n\t\t\tsubstringComparator:\n\t\t\t\tsubstr: value2\n\t\tfilterIfMissing: yes\n\t\tlatestVersionOnly: yes\n\nfilterList1 = new hbase.FilterList\nfilterList2 = new hbase.FilterList\nfilterList3 = new hbase.FilterList \"MUST_PASS_ONE\"\n\nfilterList1.addFilter f1\nfilterList2.addFilter f2\n\nfilterList3.addFilter filterList1\nfilterList3.addFilter filterList2\n\nscan.setFilter filterList3\nscan.toArray (err, res) ->\n\tconsole.log arguments\n```\n```coffeescript\nscan = client.getScanner table\n\nscan.toArray (err, res) ->\n\tconsole.log arguments\n```\n```coffeescript\nscan = client.getScanner table\n\nscan.each (err, row) ->\n\treturn unless row # no more rows\n\t# do something with row synchronously\n```\n```coffeescript\nscan = client.getScanner table\n\nscan.each (err, row, done) ->\n\treturn unless row # no more rows\n\t# do something with row asynchronously\n\tdone()\n```\n```coffeescript\nscan = client.getScanner table\n\nscan.each (err, row, done) ->\n\t# do something with row asynchronously\n\tdone()\n, (err) ->\n\t# error or no more rows\n\tconsole.log err if err\n```\n\n### checkAndPut\nValues can be only strings or buffers.\n##### `checkAndPut table, rowKey, cf, qualifier, value, putObject, callback`\n```coffeescript\nput = new hbase.Put rowKey1\nput.add cf1, qualifier1, value1\n\nclient.checkAndPut table, rowKey2, cf2, qualifier2, value2, put, (err, res) ->\n\tconsole.log arguments\n```\n\n### checkAndDelete\n##### `checkAndDelete table, rowKey, cf, qualifier, value, deleteObject, callback`\n```coffeescript\ndel = new hbase.Put rowKey1\n\nclient.checkAndDelete table, rowKey2, cf2, qualifier2, value2, del, (err, res) ->\n\tconsole.log arguments\n```\n\n### increment\n##### `increment table, incrementObject, callback`\n```coffeescript\nincrement = new hbase.Increment rowKey\nincrement.add cf1, qualifier1, incrementValue1\nincrement.add cf2, qualifier2, incrementValue2\n\nclient.increment table, increment, (err, res) ->\n\tconsole.log arguments\n```\n\n### incrementColumnValue\n##### `incrementColumnValue table, rowKey, cf, qualifier, value, callback`\n```coffeescript\nclient.incrementColumnValue table, rowKey, cf, qualifier, incrementValue, (err, res) ->\n\tconsole.log arguments\n```\n\n\n## License\n\nhbase-rpc-client is made available under the Apache License, version 2.0\n",
  "readmeFilename": "README.md",
  "_id": "hbase-rpc-client@0.1.10",
  "dist": {
    "shasum": "9217b594d64d1fc595b8356a2a18a9354c922280"
  },
  "_from": "hbase-rpc-client@",
  "_resolved": "https://registry.npmjs.org/hbase-rpc-client/-/hbase-rpc-client-0.1.10.tgz"
}
